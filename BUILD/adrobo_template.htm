<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\BUILD\adrobo_template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\BUILD\adrobo_template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Sun Sep  6 21:25:34 2020
<BR><P>
<H3>Maximum Stack Usage =        664 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[14f]">core_util_critical_section_enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13c]">mbed_assert_internal</a><BR>
 <LI><a href="#[18e]">hal_critical_section_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13c]">mbed_assert_internal</a><BR>
 <LI><a href="#[137]">serial_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13c]">mbed_assert_internal</a><BR>
 <LI><a href="#[199]">pin_function</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13c]">mbed_assert_internal</a><BR>
 <LI><a href="#[120]">error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[192]">mbed_error_vfprintf</a><BR>
 <LI><a href="#[198]">pin_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13c]">mbed_assert_internal</a><BR>
 <LI><a href="#[195]">gpio_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13c]">mbed_assert_internal</a><BR>
 <LI><a href="#[178]">gpio_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[121]">Set_GPIO_Clock</a><BR>
 <LI><a href="#[19f]">initialize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13c]">mbed_assert_internal</a><BR>
 <LI><a href="#[12e]">__cxa_guard_release</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13c]">mbed_assert_internal</a><BR>
 <LI><a href="#[12c]">__cxa_guard_acquire</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13c]">mbed_assert_internal</a><BR>
 <LI><a href="#[191]">print_error_report</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a6]">mbed_error_printf</a><BR>
 <LI><a href="#[ed]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ed]">_sys_exit</a><BR>
 <LI><a href="#[18c]">core_util_atomic_incr_u16</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18c]">core_util_atomic_incr_u16</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[1e]">CAN_RX0_IRQHandler</a> from .\build\can_api.o(.text.CAN_RX0_IRQHandler) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[1f]">CAN_RX1_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[20]">CAN_SCE_IRQHandler</a> from .\build\can_api.o(.text.CAN_SCE_IRQHandler) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[1d]">CAN_TX_IRQHandler</a> from .\build\can_api.o(.text.CAN_TX_IRQHandler) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[32]">COMP2_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[33]">COMP4_6_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[2e]">EXTI15_10_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[12]">EXTI2_TSC_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[34]">FPU_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[29]">I2C1_ER_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[28]">I2C1_EV_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[2f]">RTC_Alarm_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from .\build\system_clock.o(.text.SystemInit) referenced from .\build\startup_stm32f303x8.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[30]">TIM6_DAC1_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[31]">TIM7_DAC2_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[2b]">USART1_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[2c]">USART2_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[2d]">USART3_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from .\build\startup_stm32f303x8.o(.text) referenced from .\build\startup_stm32f303x8.o(RESET)
 <LI><a href="#[6a]">_GLOBAL__sub_I_SPI.cpp</a> from .\build\spi.o(.text._GLOBAL__sub_I_SPI.cpp) referenced from .\build\spi.o(.init_array)
 <LI><a href="#[69]">_GLOBAL__sub_I_main.cpp</a> from .\build\main.o(.text._GLOBAL__sub_I_main.cpp) referenced from .\build\main.o(.init_array)
 <LI><a href="#[3e]">DirectSerial::read(void*, unsigned)</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial4readEPvj) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[40]">DirectSerial::seek(long, int)</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial4seekEli) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[46]">DirectSerial::size()</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial4sizeEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[41]">DirectSerial::close()</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial5closeEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[3f]">DirectSerial::write(const void*, unsigned)</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial5writeEPKvj) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[43]">DirectSerial::isatty()</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial6isattyEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[3d]">DirectSerial::~DirectSerial__deallocating()</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerialD0Ev) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[4a]">mbed::FileHandle::set_blocking(bool)</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle12set_blockingEb) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[4a]">mbed::FileHandle::set_blocking(bool)</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle12set_blockingEb) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[49]">mbed::FileHandle::flen()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4flenEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[49]">mbed::FileHandle::flen()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4flenEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[51]">mbed::FileHandle::size()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4sizeEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[42]">mbed::FileHandle::sync()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4syncEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[42]">mbed::FileHandle::sync()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4syncEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[44]">mbed::FileHandle::tell()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4tellEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[44]">mbed::FileHandle::tell()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4tellEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[48]">mbed::FileHandle::fsync()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle5fsyncEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[48]">mbed::FileHandle::fsync()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle5fsyncEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[47]">mbed::FileHandle::lseek(long, int)</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle5lseekEli) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[47]">mbed::FileHandle::lseek(long, int)</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle5lseekEli) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[4d]">mbed::FileHandle::sigio(mbed::Callback&lang;void()&rang;)</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle5sigioENS_8CallbackIFvvEEE) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[4d]">mbed::FileHandle::sigio(mbed::Callback&lang;void()&rang;)</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle5sigioENS_8CallbackIFvvEEE) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[50]">mbed::FileHandle::isatty()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle6isattyEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[45]">mbed::FileHandle::rewind()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle6rewindEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[45]">mbed::FileHandle::rewind()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle6rewindEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[4e]">mbed::FileHandle::~FileHandle__deallocating()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandleD0Ev) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[3c]">mbed::NonCopyable&lang;mbed::FileHandle&rang;::~NonCopyable__sub_object()</a> from .\build\filehandle.o(.text._ZN4mbed11NonCopyableINS_10FileHandleEED2Ev) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[3c]">mbed::NonCopyable&lang;mbed::FileHandle&rang;::~NonCopyable__sub_object()</a> from .\build\filehandle.o(.text._ZN4mbed11NonCopyableINS_10FileHandleEED2Ev) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[55]">mbed::BusIn::lock()</a> from .\build\busin.o(.text._ZN4mbed5BusIn4lockEv) referenced from .\build\busin.o(.rodata._ZTVN4mbed5BusInE)
 <LI><a href="#[56]">mbed::BusIn::unlock()</a> from .\build\busin.o(.text._ZN4mbed5BusIn6unlockEv) referenced from .\build\busin.o(.rodata._ZTVN4mbed5BusInE)
 <LI><a href="#[54]">mbed::BusIn::~BusIn__deallocating()</a> from .\build\busin.o(.text._ZN4mbed5BusInD0Ev) referenced from .\build\busin.o(.rodata._ZTVN4mbed5BusInE)
 <LI><a href="#[53]">mbed::BusIn::~BusIn__sub_object()</a> from .\build\busin.o(.text._ZN4mbed5BusInD2Ev) referenced from .\build\busin.o(.rodata._ZTVN4mbed5BusInE)
 <LI><a href="#[59]">mbed::BusOut::lock()</a> from .\build\busout.o(.text._ZN4mbed6BusOut4lockEv) referenced from .\build\busout.o(.rodata._ZTVN4mbed6BusOutE)
 <LI><a href="#[5a]">mbed::BusOut::unlock()</a> from .\build\busout.o(.text._ZN4mbed6BusOut6unlockEv) referenced from .\build\busout.o(.rodata._ZTVN4mbed6BusOutE)
 <LI><a href="#[58]">mbed::BusOut::~BusOut__deallocating()</a> from .\build\busout.o(.text._ZN4mbed6BusOutD0Ev) referenced from .\build\busout.o(.rodata._ZTVN4mbed6BusOutE)
 <LI><a href="#[57]">mbed::BusOut::~BusOut__sub_object()</a> from .\build\busout.o(.text._ZN4mbed6BusOutD2Ev) referenced from .\build\busout.o(.rodata._ZTVN4mbed6BusOutE)
 <LI><a href="#[5d]">mbed::AnalogIn::lock()</a> from .\build\main.o(.text._ZN4mbed8AnalogIn4lockEv) referenced from .\build\main.o(.rodata._ZTVN4mbed8AnalogInE)
 <LI><a href="#[5e]">mbed::AnalogIn::unlock()</a> from .\build\main.o(.text._ZN4mbed8AnalogIn6unlockEv) referenced from .\build\main.o(.rodata._ZTVN4mbed8AnalogInE)
 <LI><a href="#[5c]">mbed::AnalogIn::~AnalogIn__deallocating()</a> from .\build\main.o(.text._ZN4mbed8AnalogInD0Ev) referenced from .\build\main.o(.rodata._ZTVN4mbed8AnalogInE)
 <LI><a href="#[5b]">mbed::AnalogIn::~AnalogIn__sub_object()</a> from .\build\main.o(.text._ZN4mbed8AnalogInD2Ev) referenced from .\build\main.o(.rodata._ZTVN4mbed8AnalogInE)
 <LI><a href="#[5f]">void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)</a> from .\build\i2c.o(.text._ZN4mbed8CallbackIFviEE13function_callIPS1_EEvPKvi) referenced from .\build\i2c.o(.rodata._ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[61]">void mbed::Callback&lang;void(int)&rang;::function_dtor&lang;void(*)(int)&rang;(void*)</a> from .\build\i2c.o(.text._ZN4mbed8CallbackIFviEE13function_dtorIPS1_EEvPv) referenced from .\build\i2c.o(.rodata._ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[60]">void mbed::Callback&lang;void(int)&rang;::function_move&lang;void(*)(int)&rang;(void*, const void*)</a> from .\build\i2c.o(.text._ZN4mbed8CallbackIFviEE13function_moveIPS1_EEvPvPKv) referenced from .\build\i2c.o(.rodata._ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[4c]">DirectSerial::poll(short) const</a> from .\build\mbed_retarget.o(.text._ZNK12DirectSerial4pollEs) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[4b]">mbed::FileHandle::is_blocking() const</a> from .\build\filehandle.o(.text._ZNK4mbed10FileHandle11is_blockingEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[4b]">mbed::FileHandle::is_blocking() const</a> from .\build\filehandle.o(.text._ZNK4mbed10FileHandle11is_blockingEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[52]">mbed::FileHandle::poll(short) const</a> from .\build\filehandle.o(.text._ZNK4mbed10FileHandle4pollEs) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[4f]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_w.l(cxa_virtual.cpp.o)(.text.__cxa_pure_virtual) referenced 4 times from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[36]">__main</a> from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main) referenced from .\build\startup_stm32f303x8.o(.text)
 <LI><a href="#[3a]">_get_lc_ctype</a> from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code) referenced from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text)
 <LI><a href="#[38]">_printf_input_char</a> from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text) referenced from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text)
 <LI><a href="#[37]">_snputc</a> from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text) referenced from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text)
 <LI><a href="#[39]">fputc</a> from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fputc.o)(i.fputc) referenced from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char_file.o)(.text)
 <LI><a href="#[6b]">ticker_irq_handler</a> from .\build\mbed_ticker_api.o(.text.ticker_irq_handler) referenced from .\build\mbed_us_ticker_api.o(.data.irq_handler)
 <LI><a href="#[3b]">timer_irq_handler</a> from .\build\us_ticker.o(.text.timer_irq_handler) referenced 2 times from .\build\us_ticker.o(.text.__NVIC_SetVector)
 <LI><a href="#[65]">us_ticker_clear_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_clear_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[64]">us_ticker_disable_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_disable_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[67]">us_ticker_fire_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_fire_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[68]">us_ticker_get_info</a> from .\build\us_ticker.o(.text.us_ticker_get_info) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[62]">us_ticker_init</a> from .\build\us_ticker.o(.text.us_ticker_init) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[63]">us_ticker_read</a> from .\build\us_ticker.o(.text.us_ticker_read) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[66]">us_ticker_set_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_set_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1d2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[1d3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[70]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter_copy.o)(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1d4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__scatter_zi.o)(!!handler_zi), UNUSED)

<P><STRONG><a name="[71]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_n.o)(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[b8]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_percent.o)(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[73]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_p.o)(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[75]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_f.o)(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[77]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_e.o)(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[78]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_g.o)(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[79]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_a.o)(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[1d5]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_ll.o)(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[7b]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_i.o)(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7d]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_d.o)(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7e]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_u.o)(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7f]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_o.o)(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[81]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_x.o)(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[83]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_lli.o)(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[85]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_lld.o)(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[86]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_llu.o)(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[87]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_llo.o)(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[89]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_llx.o)(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[1d6]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_l.o)(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[8b]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_c.o)(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[8d]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_s.o)(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[8f]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_lc.o)(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[91]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_ls.o)(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[1d7]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_percent_end.o)(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[a4]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit.o)(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[93]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[95]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1d8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1d9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1da]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1db]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1dc]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[99]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1dd]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1de]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1df]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1e0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1e1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1e2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1e3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1e4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1e5]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1e6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1e7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1e8]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[6e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__rtentry.o)(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1ec]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__rtentry4.o)(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1ed]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[a1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; mbed_sdk_init &rArr; SetSysClock &rArr; SetSysClock_PLL_HSI &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[a3]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a5]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; $Super$$main &rArr; mbed::PwmOut::period_ms(int) &rArr; pwmout_period_ms &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ee]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>COMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>COMP4_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM6_DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM7_DAC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f303x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_errno_addr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18reserve_filehandlev
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18handle_open_errorsij
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[1ef]"></a>__errno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_errno_addr.o)(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_errno_addr.o)(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[ab]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_free.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lludivv7m.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick
</UL>

<P><STRONG><a name="[1f1]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lludivv7m.o)(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>

<P><STRONG><a name="[af]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__2printf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b1]"></a>__2vfprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__2vfprintf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
</UL>

<P><STRONG><a name="[7c]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[b5]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[82]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[8a]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[74]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[b6]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__printf_flags_ss_wp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b9]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fflush.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[bc]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fflush.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bd]"></a>freopen</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fopen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[c0]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fopen.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[be]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fclose.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1f2]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fclose.o)(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(strspn.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[164]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(strlen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[163]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(strncmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1f3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[180]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(strcmpv7em.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[6c]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_aeabi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[a9]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_heap_descriptor.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1f6]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[c5]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[96]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[c8]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_init.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1fa]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_init.o)(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[cb]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[b2]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b3]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[c9]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_str.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b4]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_intcommon.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[72]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_charcount.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[d2]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ad]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[ae]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_sputc.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[37]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char_file.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2vfprintf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[d6]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_wctomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[84]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_longlong_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[d8]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[80]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[88]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[d5]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(ferror.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[d9]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[1c7]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1fb]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fseek.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _fseek &rArr; _sys_istty &rArr; isatty &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[1fc]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fseek.o)(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(setvbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[db]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[de]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[ba]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[da]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(stdio.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[9d]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(initio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[e4]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(initio.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[e5]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[98]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(rt_locale.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[c4]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(h1_extend.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1fd]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(maybetermalloc1.o)(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lludiv10.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e6]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_fp_hex.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[d4]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_fp_infnan.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e7]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[8c]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[8e]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[e8]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[90]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[92]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[cd]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(bigflt0.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[df]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(ftell.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1fe]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(ftell.o)(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_c16rtomb.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[d7]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_c16rtomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[eb]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(abort.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[e2]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_rtred_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[c6]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_rtmem_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[c7]"></a>__rt_heap_escrow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(heapauxa.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[c3]"></a>__rt_heap_expand</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(heapauxa.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[ef]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_exit.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[ec]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_abrt_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[ee]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_rtred_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[f0]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_rtmem_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[f2]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_general.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[f1]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(defsig_abrt_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[a6]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_sdk_boot.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; mbed::PwmOut::period_ms(int) &rArr; pwmout_period_ms &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1e]"></a>CAN_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\can_api.o(.text.CAN_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_RX0_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\can_api.o(.text.CAN_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_SCE_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN_TX_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\can_api.o(.text.CAN_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_TX_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(RESET)
</UL>
<P><STRONG><a name="[18a]"></a>HAL_ADCEx_Calibration_GetValue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\stm32f3xx_hal_adc_ex.o(.text.HAL_ADCEx_Calibration_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, .\build\stm32f3xx_hal_adc_ex.o(.text.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; ADC_Disable &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
</UL>

<P><STRONG><a name="[186]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 722 bytes, Stack size 24 bytes, .\build\stm32f3xx_hal_adc_ex.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[fa]"></a>HAL_ADC_Init</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, .\build\stm32f3xx_hal_adc_ex.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_ADC_Init &rArr; ADC_Disable &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
</UL>

<P><STRONG><a name="[fb]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, .\build\stm32f3xx_hal_adc_ex.o(.text.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_ADC_PollForConversion &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[fc]"></a>HAL_ADC_Start</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, .\build\stm32f3xx_hal_adc_ex.o(.text.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[f6]"></a>HAL_GetTick</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\hal_tick_overrides.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[100]"></a>HAL_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\stm32f3xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; init_32bit_timer &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[102]"></a>HAL_InitTick</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\hal_tick_overrides.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_InitTick &rArr; init_32bit_timer &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_32bit_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[101]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\stm32f3xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[105]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, .\build\stm32f3xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>

<P><STRONG><a name="[19b]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, .\build\stm32f3xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_32bit_timer
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>

<P><STRONG><a name="[108]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\stm32f3xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[107]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\stm32f3xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_32bit_timer
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[109]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\stm32f3xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>

<P><STRONG><a name="[106]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, .\build\stm32f3xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[10a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 750 bytes, Stack size 32 bytes, .\build\stm32f3xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>

<P><STRONG><a name="[10b]"></a>HAL_TIMEx_PWMN_Start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\stm32f3xx_hal_tim_ex.o(.text.HAL_TIMEx_PWMN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_PWMN_Start &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
</UL>

<P><STRONG><a name="[10d]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\stm32f3xx_hal_tim.o(.text.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_32bit_timer
</UL>

<P><STRONG><a name="[10f]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\stm32f3xx_hal_tim.o(.text.HAL_TIM_OC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_32bit_timer
</UL>

<P><STRONG><a name="[111]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, .\build\stm32f3xx_hal_tim_ex.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC6_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
</UL>

<P><STRONG><a name="[118]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\stm32f3xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>

<P><STRONG><a name="[119]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\stm32f3xx_hal_tim.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
</UL>

<P><STRONG><a name="[11a]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, .\build\stm32f3xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_UART_Init &rArr; UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[11e]"></a>SetSysClock</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\system_clock.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SetSysClock &rArr; SetSysClock_PLL_HSI &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[11f]"></a>SetSysClock_PLL_HSI</STRONG> (Thumb, 76 bytes, Stack size 80 bytes, .\build\system_clock.o(.text.SetSysClock_PLL_HSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SetSysClock_PLL_HSI &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[121]"></a>Set_GPIO_Clock</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, .\build\gpio_api.o(.text.Set_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Set_GPIO_Clock &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[1ac]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, .\build\system_stm32f3xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, .\build\system_clock.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303x8.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, .\build\stm32f3xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[110]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\stm32f3xx_hal_tim.o(.text.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
</UL>

<P><STRONG><a name="[112]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, .\build\stm32f3xx_hal_tim.o(.text.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[113]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, .\build\stm32f3xx_hal_tim.o(.text.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[114]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, .\build\stm32f3xx_hal_tim.o(.text.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[115]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, .\build\stm32f3xx_hal_tim.o(.text.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[11c]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, .\build\stm32f3xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11d]"></a>UART_CheckIdleState</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, .\build\stm32f3xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11b]"></a>UART_SetConfig</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, .\build\stm32f3xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[122]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, .\build\stm32f3xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[3e]"></a>DirectSerial::read(void*, unsigned)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DirectSerial::read(void*, unsigned) &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[40]"></a>DirectSerial::seek(long, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial4seekEli))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[46]"></a>DirectSerial::size()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial4sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[41]"></a>DirectSerial::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial5closeEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[3f]"></a>DirectSerial::write(const void*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DirectSerial::write(const void*, unsigned) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[43]"></a>DirectSerial::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial6isattyEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[135]"></a>DirectSerial::DirectSerial(PinName, PinName, int)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerialC2E7PinNameS0_i), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::FileHandle__sub_object()
</UL>

<P><STRONG><a name="[12d]"></a>DirectSerial::DirectSerial__sub_object(PinName, PinName, int)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerialC2E7PinNameS0_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15default_consolev
</UL>

<P><STRONG><a name="[3d]"></a>DirectSerial::~DirectSerial__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerialD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DirectSerial::~DirectSerial__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[13a]"></a>SingletonPtr&lang;PlatformMutex&rang;::get()</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, .\build\main.o(.text._ZN12SingletonPtrI13PlatformMutexE3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformMutex::PlatformMutex__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
</UL>

<P><STRONG><a name="[131]"></a>SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\main.o(.text._ZN12SingletonPtrI13PlatformMutexEptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::unlock()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::lock()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18reserve_filehandlev
</UL>

<P><STRONG><a name="[13b]"></a>PlatformMutex::PlatformMutex__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\main.o(.text._ZN13PlatformMutexC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PlatformMutex::PlatformMutex__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusOut::BusOut(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusIn::BusIn(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::get()
</UL>

<P><STRONG><a name="[13d]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\softwarepwm.o(.text._ZN4mbed10DigitalOutC2E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbed::DigitalOut::DigitalOut__sub_object(PinName) &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusOut::BusOut(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[4a]"></a>mbed::FileHandle::set_blocking(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle12set_blockingEb))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[49]"></a>mbed::FileHandle::flen()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle4flenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileHandle::flen()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[51]"></a>mbed::FileHandle::size()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle4sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileHandle::size()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[42]"></a>mbed::FileHandle::sync()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle4syncEv))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[44]"></a>mbed::FileHandle::tell()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle4tellEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileHandle::tell()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[48]"></a>mbed::FileHandle::fsync()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle5fsyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileHandle::fsync()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[47]"></a>mbed::FileHandle::lseek(long, int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle5lseekEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileHandle::lseek(long, int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[4d]"></a>mbed::FileHandle::sigio(mbed::Callback&lang;void()&rang;)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle5sigioENS_8CallbackIFvvEEE))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[50]"></a>mbed::FileHandle::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle6isattyEv))
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[45]"></a>mbed::FileHandle::rewind()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle6rewindEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileHandle::rewind()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[136]"></a>mbed::FileHandle::FileHandle__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZN4mbed10FileHandleC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(PinName, PinName, int)
</UL>

<P><STRONG><a name="[4e]"></a>mbed::FileHandle::~FileHandle__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandleD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[3c]"></a>mbed::NonCopyable&lang;mbed::FileHandle&rang;::~NonCopyable__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed11NonCopyableINS_10FileHandleEED2Ev))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[13f]"></a>mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\spi.o(.text._ZN4mbed11TransactionINS_3SPIEEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object() &rArr; mbed::transaction_t::transaction_t__sub_object() &rArr; mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::transaction_t__sub_object()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::CircularBuffer__sub_object()
</UL>

<P><STRONG><a name="[140]"></a>mbed::transaction_t::transaction_t__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\spi.o(.text._ZN4mbed13transaction_tC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::transaction_t::transaction_t__sub_object() &rArr; mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object()
</UL>

<P><STRONG><a name="[142]"></a>mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::CircularBuffer__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\spi.o(.text._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::CircularBuffer__sub_object() &rArr; mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object() &rArr; mbed::transaction_t::transaction_t__sub_object() &rArr; mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[55]"></a>mbed::BusIn::lock()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\busin.o(.text._ZN4mbed5BusIn4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::BusIn::lock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> busin.o(.rodata._ZTVN4mbed5BusInE)
</UL>
<P><STRONG><a name="[143]"></a>mbed::BusIn::mode(PinMode)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\busin.o(.text._ZN4mbed5BusIn4modeE7PinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::BusIn::mode(PinMode) &rArr; mbed::DigitalIn::mode(PinMode) &rArr; gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::mode(PinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[145]"></a>mbed::BusIn::read()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\busin.o(.text._ZN4mbed5BusIn4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::BusIn::read() &rArr; mbed::DigitalIn::read()
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusIn::operator int()
</UL>

<P><STRONG><a name="[56]"></a>mbed::BusIn::unlock()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\busin.o(.text._ZN4mbed5BusIn6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::BusIn::unlock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> busin.o(.rodata._ZTVN4mbed5BusInE)
</UL>
<P><STRONG><a name="[147]"></a>mbed::BusIn::BusIn(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, .\build\busin.o(.text._ZN4mbed5BusInC2E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mbed::BusIn::BusIn(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName) &rArr; operator new(unsigned) &rArr; mbed_error &rArr; mbed_halt_system &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformMutex::PlatformMutex__sub_object()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn__sub_object(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
</UL>

<P><STRONG><a name="[1ff]"></a>mbed::BusIn::BusIn__sub_object(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, .\build\busin.o(.text._ZN4mbed5BusInC2E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_), UNUSED)

<P><STRONG><a name="[54]"></a>mbed::BusIn::~BusIn__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\busin.o(.text._ZN4mbed5BusInD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::BusIn::~BusIn__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusIn::~BusIn__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> busin.o(.rodata._ZTVN4mbed5BusInE)
</UL>
<P><STRONG><a name="[14a]"></a>mbed::BusIn::~BusIn()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\busin.o(.text._ZN4mbed5BusInD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[53]"></a>mbed::BusIn::~BusIn__sub_object()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\busin.o(.text._ZN4mbed5BusInD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::BusIn::~BusIn__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusIn::~BusIn__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> busin.o(.rodata._ZTVN4mbed5BusInE)
</UL>
<P><STRONG><a name="[14b]"></a>mbed::BusIn::operator int()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\busin.o(.text._ZN4mbed5BusIncviEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::BusIn::operator int() &rArr; mbed::BusIn::read() &rArr; mbed::DigitalIn::read()
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusIn::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[59]"></a>mbed::BusOut::lock()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\busout.o(.text._ZN4mbed6BusOut4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::BusOut::lock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> busout.o(.rodata._ZTVN4mbed6BusOutE)
</UL>
<P><STRONG><a name="[5a]"></a>mbed::BusOut::unlock()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\busout.o(.text._ZN4mbed6BusOut6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::BusOut::unlock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> busout.o(.rodata._ZTVN4mbed6BusOutE)
</UL>
<P><STRONG><a name="[14c]"></a>mbed::BusOut::BusOut(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, .\build\busout.o(.text._ZN4mbed6BusOutC2E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mbed::BusOut::BusOut(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName) &rArr; operator new(unsigned) &rArr; mbed_error &rArr; mbed_halt_system &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut__sub_object(PinName)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformMutex::PlatformMutex__sub_object()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[200]"></a>mbed::BusOut::BusOut__sub_object(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, .\build\busout.o(.text._ZN4mbed6BusOutC2E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_), UNUSED)

<P><STRONG><a name="[58]"></a>mbed::BusOut::~BusOut__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\busout.o(.text._ZN4mbed6BusOutD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::BusOut::~BusOut__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusOut::~BusOut__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> busout.o(.rodata._ZTVN4mbed6BusOutE)
</UL>
<P><STRONG><a name="[14d]"></a>mbed::BusOut::~BusOut()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\busout.o(.text._ZN4mbed6BusOutD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[57]"></a>mbed::BusOut::~BusOut__sub_object()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\busout.o(.text._ZN4mbed6BusOutD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::BusOut::~BusOut__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusOut::~BusOut__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> busout.o(.rodata._ZTVN4mbed6BusOutE)
</UL>
<P><STRONG><a name="[14e]"></a>mbed::PwmOut::pulsewidth_us(int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\main.o(.text._ZN4mbed6PwmOut13pulsewidth_usEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mbed::PwmOut::pulsewidth_us(int) &rArr; pwmout_pulsewidth_us &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_pulsewidth_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[152]"></a>mbed::PwmOut::lock_deep_sleep()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\motor.o(.text._ZN4mbed6PwmOut15lock_deep_sleepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbed::PwmOut::lock_deep_sleep() &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::write(float)
</UL>

<P><STRONG><a name="[154]"></a>mbed::PwmOut::write(float)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\motor.o(.text._ZN4mbed6PwmOut5writeEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbed::PwmOut::write(float) &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::lock_deep_sleep()
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::operator =(float)
</UL>

<P><STRONG><a name="[156]"></a>mbed::PwmOut::period(float)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\motor.o(.text._ZN4mbed6PwmOut6periodEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = mbed::PwmOut::period(float) &rArr; pwmout_period &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::period(float)
</UL>

<P><STRONG><a name="[158]"></a>mbed::PwmOut::period_ms(int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\main.o(.text._ZN4mbed6PwmOut9period_msEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = mbed::PwmOut::period_ms(int) &rArr; pwmout_period_ms &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[15a]"></a>mbed::PwmOut::PwmOut__sub_object(PinName)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\motor.o(.text._ZN4mbed6PwmOutC2E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mbed::PwmOut::PwmOut__sub_object(PinName) &rArr; pwmout_init &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PinName, PinName)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
</UL>

<P><STRONG><a name="[15c]"></a>mbed::PwmOut::operator =(float)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\motor.o(.text._ZN4mbed6PwmOutaSEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mbed::PwmOut::operator =(float) &rArr; mbed::PwmOut::write(float) &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::write(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::write(float)
</UL>

<P><STRONG><a name="[5d]"></a>mbed::AnalogIn::lock()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\main.o(.text._ZN4mbed8AnalogIn4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = mbed::AnalogIn::lock() &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn__sub_object(PinName)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTVN4mbed8AnalogInE)
</UL>
<P><STRONG><a name="[15d]"></a>mbed::AnalogIn::read()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\build\main.o(.text._ZN4mbed8AnalogIn4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbed::AnalogIn::read() &rArr; analogin_read &rArr; adc_read &rArr; HAL_ADC_PollForConversion &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[5e]"></a>mbed::AnalogIn::unlock()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\main.o(.text._ZN4mbed8AnalogIn6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = mbed::AnalogIn::unlock() &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTVN4mbed8AnalogInE)
</UL>
<P><STRONG><a name="[15f]"></a>mbed::AnalogIn::AnalogIn__sub_object(PinName)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\main.o(.text._ZN4mbed8AnalogInC2E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = mbed::AnalogIn::AnalogIn__sub_object(PinName) &rArr; analogin_init &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
</UL>

<P><STRONG><a name="[5c]"></a>mbed::AnalogIn::~AnalogIn__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\main.o(.text._ZN4mbed8AnalogInD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::AnalogIn::~AnalogIn__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTVN4mbed8AnalogInE)
</UL>
<P><STRONG><a name="[5b]"></a>mbed::AnalogIn::~AnalogIn__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\main.o(.text._ZN4mbed8AnalogInD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata._ZTVN4mbed8AnalogInE)
</UL>
<P><STRONG><a name="[5f]"></a>void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\i2c.o(.text._ZN4mbed8CallbackIFviEE13function_callIPS1_EEvPKvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.rodata._ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[61]"></a>void mbed::Callback&lang;void(int)&rang;::function_dtor&lang;void(*)(int)&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\i2c.o(.text._ZN4mbed8CallbackIFviEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.rodata._ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[60]"></a>void mbed::Callback&lang;void(int)&rang;::function_move&lang;void(*)(int)&rang;(void*, const void*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\i2c.o(.text._ZN4mbed8CallbackIFviEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.rodata._ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[161]"></a>void mbed::Callback&lang;void(int)&rang;::generate&lang;void(*)(int)&rang;(const T1&)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\i2c.o(.text._ZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>

<P><STRONG><a name="[141]"></a>mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\i2c.o(.text._ZN4mbed8CallbackIFviEEC2EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::Callback&lang;void(int)&rang;::generate&lang;void(*)(int)&rang;(const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::transaction_t__sub_object()
</UL>

<P><STRONG><a name="[162]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, .\build\filebase.o(.text._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[165]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::fileSystem() &rArr; mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[166]"></a>mbed::FilePath::isFileSystem()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath12isFileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFileSystem()
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[167]"></a>mbed::FilePath::file()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::file() &rArr; mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[1ad]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[168]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[169]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, .\build\filepath.o(.text._ZN4mbed8FilePathC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[201]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, .\build\filepath.o(.text._ZN4mbed8FilePathC2EPKc), UNUSED)

<P><STRONG><a name="[144]"></a>mbed::DigitalIn::mode(PinMode)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\busin.o(.text._ZN4mbed9DigitalIn4modeE7PinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::DigitalIn::mode(PinMode) &rArr; gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusIn::mode(PinMode)
</UL>

<P><STRONG><a name="[146]"></a>mbed::DigitalIn::read()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\busin.o(.text._ZN4mbed9DigitalIn4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::DigitalIn::read()
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9gpio_readP6gpio_t
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusIn::read()
</UL>

<P><STRONG><a name="[149]"></a>mbed::DigitalIn::DigitalIn__sub_object(PinName)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\busin.o(.text._ZN4mbed9DigitalInC2E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::DigitalIn::DigitalIn__sub_object(PinName) &rArr; gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusIn::BusIn(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[16e]"></a>Motor::write(float)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, .\build\motor.o(.text._ZN5Motor5writeEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Motor::write(float) &rArr; mbed::PwmOut::operator =(float) &rArr; mbed::PwmOut::write(float) &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::operator =(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PinName, PinName)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::operator =(float)
</UL>

<P><STRONG><a name="[16f]"></a>Motor::period(float)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\motor.o(.text._ZN5Motor6periodEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Motor::period(float) &rArr; mbed::PwmOut::period(float) &rArr; pwmout_period &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::period(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PinName, PinName)
</UL>

<P><STRONG><a name="[170]"></a>Motor::Motor(PinName, PinName)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\motor.o(.text._ZN5MotorC2E7PinNameS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = Motor::Motor(PinName, PinName) &rArr; mbed::PwmOut::PwmOut__sub_object(PinName) &rArr; pwmout_init &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::period(float)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::write(float)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::PwmOut__sub_object(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[202]"></a>Motor::Motor__sub_object(PinName, PinName)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\motor.o(.text._ZN5MotorC2E7PinNameS0_), UNUSED)

<P><STRONG><a name="[171]"></a>Motor::operator =(float)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\main.o(.text._ZN5MotoraSEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Motor::operator =(float) &rArr; Motor::write(float) &rArr; mbed::PwmOut::operator =(float) &rArr; mbed::PwmOut::write(float) &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::write(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[4c]"></a>DirectSerial::poll(short) const</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._ZNK12DirectSerial4pollEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DirectSerial::poll(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[4b]"></a>mbed::FileHandle::is_blocking() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZNK4mbed10FileHandle11is_blockingEv))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[52]"></a>mbed::FileHandle::poll(short) const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZNK4mbed10FileHandle4pollEs))
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[139]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::~AnalogIn__deallocating()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusIn::~BusIn()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusIn::~BusIn__deallocating()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusOut::~BusOut()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusOut::~BusOut__deallocating()
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::~DirectSerial__deallocating()
</UL>

<P><STRONG><a name="[148]"></a>operator new(unsigned)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = operator new(unsigned) &rArr; mbed_error &rArr; mbed_halt_system &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusOut::BusOut(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusIn::BusIn(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[12c]"></a>__cxa_guard_acquire</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = __cxa_guard_acquire &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15default_consolev
</UL>

<P><STRONG><a name="[12e]"></a>__cxa_guard_release</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text.__cxa_guard_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = __cxa_guard_release &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15default_consolev
</UL>

<P><STRONG><a name="[4f]"></a>__cxa_pure_virtual</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_w.l(cxa_virtual.cpp.o)(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[a0]"></a>__user_setup_stackheap</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text.__user_setup_stackheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbed_user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[176]"></a>_mbed_user_setup_stackheap</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._mbed_user_setup_stackheap))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a2]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_sdk_boot.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _platform_post_stackheap_init &rArr; mbed_sdk_init &rArr; SetSysClock &rArr; SetSysClock_PLL_HSI &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_copy_nvic
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[c2]"></a>_sys_close</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _sys_close &rArr; close &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[ed]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[dc]"></a>_sys_flen</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sys_flen &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL7get_fhci
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[dd]"></a>_sys_istty</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _sys_istty &rArr; isatty &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[bf]"></a>_sys_open</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL7get_fhci
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18openflags_to_posixi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[e0]"></a>_sys_seek</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _sys_seek &rArr; lseek &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[e1]"></a>_sys_write</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _sys_write &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1b9]"></a>_ticker_match_interval_passed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, .\build\mbed_ticker_api.o(.text._ticker_match_interval_passed))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[f3]"></a>_ttywrch</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _ttywrch &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[175]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_w.l(abort_message.cpp.o)(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[185]"></a>adc_read</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, .\build\analogin_device.o(.text.adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = adc_read &rArr; HAL_ADC_PollForConversion &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read
</UL>

<P><STRONG><a name="[160]"></a>analogin_init</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, .\build\analogin_device.o(.text.analogin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = analogin_init &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_function
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_GetValue
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn__sub_object(PinName)
</UL>

<P><STRONG><a name="[15e]"></a>analogin_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\analogin_api.o(.text.analogin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = analogin_read &rArr; adc_read &rArr; HAL_ADC_PollForConversion &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::read()
</UL>

<P><STRONG><a name="[17e]"></a>close</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = close &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL7get_fhci
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[1ab]"></a>core_util_are_interrupts_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_critical.o(.text.core_util_are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[18c]"></a>core_util_atomic_incr_u16</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\mbed_critical.o(.text.core_util_atomic_incr_u16))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
</UL>

<P><STRONG><a name="[14f]"></a>core_util_critical_section_enter</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, .\build\mbed_critical.o(.text.core_util_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::PwmOut__sub_object(PinName)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::period(float)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::write(float)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::period_ms(int)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::pulsewidth_us(int)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::mode(PinMode)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
</UL>

<P><STRONG><a name="[151]"></a>core_util_critical_section_exit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\mbed_critical.o(.text.core_util_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::PwmOut__sub_object(PinName)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::period(float)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::write(float)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::period_ms(int)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::pulsewidth_us(int)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::mode(PinMode)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
</UL>

<P><STRONG><a name="[1aa]"></a>core_util_is_isr_active</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_critical.o(.text.core_util_is_isr_active))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[120]"></a>error</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, .\build\mbed_error.o(.text.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>

<P><STRONG><a name="[a7]"></a>exit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ba]"></a>get_uart_index</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, .\build\serial_api.o(.text.get_uart_index))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[fd]"></a>get_us_ticker_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(.text.get_us_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[179]"></a>gpio_dir</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\gpio_api.o(.text.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[178]"></a>gpio_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, .\build\gpio_api.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = gpio_init &rArr;  Set_GPIO_Clock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[16d]"></a>gpio_init_in</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\mbed_gpio.o(.text.gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn__sub_object(PinName)
</UL>

<P><STRONG><a name="[196]"></a>gpio_init_in_ex</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_gpio.o(.text.gpio_init_in_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>

<P><STRONG><a name="[13e]"></a>gpio_init_out</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\mbed_gpio.o(.text.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut__sub_object(PinName)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[197]"></a>gpio_init_out_ex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_gpio.o(.text.gpio_init_out_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[16b]"></a>gpio_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\gpio_api.o(.text.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::mode(PinMode)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[195]"></a>gpio_set</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, .\build\gpio_api.o(.text.gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[18d]"></a>hal_critical_section_enter</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\mbed_critical_section_api.o(.text.hal_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_critical_section_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>

<P><STRONG><a name="[18e]"></a>hal_critical_section_exit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, .\build\mbed_critical_section_api.o(.text.hal_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
</UL>

<P><STRONG><a name="[103]"></a>init_32bit_timer</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, .\build\us_ticker.o(.text.init_32bit_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_32bit_timer &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetVector
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[19e]"></a>init_uart</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, .\build\serial_api.o(.text.init_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = init_uart &rArr; HAL_UART_Init &rArr; UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[17f]"></a>isatty</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text.isatty))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = isatty &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL7get_fhci
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>

<P><STRONG><a name="[183]"></a>lseek</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text.lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lseek &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL7get_fhci
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[f4]"></a>$Super$$main</STRONG> (Thumb, 372 bytes, Stack size 8 bytes, .\build\main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; mbed::PwmOut::period_ms(int) &rArr; pwmout_period_ms &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::operator =(float)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::read()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::period_ms(int)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::pulsewidth_us(int)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusIn::operator int()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusIn::mode(PinMode)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>mbed_assert_internal</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, .\build\mbed_assert.o(.text.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::get()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[17c]"></a>mbed_copy_nvic</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\build\mbed_sdk_boot.o(.text.mbed_copy_nvic))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[193]"></a>mbed_die</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, .\build\mbed_board.o(.text.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[174]"></a>mbed_error</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\mbed_error.o(.text.mbed_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mbed_error &rArr; mbed_halt_system &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_function
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
</UL>

<P><STRONG><a name="[1a6]"></a>mbed_error_printf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, .\build\mbed_board.o(.text.mbed_error_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
</UL>

<P><STRONG><a name="[192]"></a>mbed_error_vfprintf</STRONG> (Thumb, 102 bytes, Stack size 144 bytes, .\build\mbed_board.o(.text.mbed_error_vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>

<P><STRONG><a name="[17d]"></a>mbed_sdk_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\mbed_overrides.o(.text.mbed_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbed_sdk_init &rArr; SetSysClock &rArr; SetSysClock_PLL_HSI &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[182]"></a>open</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, .\build\mbed_retarget.o(.text.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18reserve_filehandlev
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18handle_open_errorsij
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[199]"></a>pin_function</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, .\build\pinmap.o(.text.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + In Cycle
<LI>Call Chain = pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_SetAFPin
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>

<P><STRONG><a name="[198]"></a>pin_mode</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, .\build\pinmap.o(.text.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_GetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[1b4]"></a>pinmap_find_function</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_find_function))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_function
</UL>

<P><STRONG><a name="[1b6]"></a>pinmap_find_peripheral</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_find_peripheral))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>

<P><STRONG><a name="[188]"></a>pinmap_function</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pinmap_function &rArr; mbed_error &rArr; mbed_halt_system &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_function
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
</UL>

<P><STRONG><a name="[1b5]"></a>pinmap_merge</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pinmap_merge &rArr; mbed_error &rArr; mbed_halt_system &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[187]"></a>pinmap_peripheral</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pinmap_peripheral &rArr; mbed_error &rArr; mbed_halt_system &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[189]"></a>pinmap_pinout</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pinmap_pinout &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[15b]"></a>pwmout_init</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, .\build\pwmout_api.o(.text.pwmout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = pwmout_init &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_function
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::PwmOut__sub_object(PinName)
</UL>

<P><STRONG><a name="[157]"></a>pwmout_period</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\pwmout_api.o(.text.pwmout_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pwmout_period &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::period(float)
</UL>

<P><STRONG><a name="[159]"></a>pwmout_period_ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\pwmout_api.o(.text.pwmout_period_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pwmout_period_ms &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::period_ms(int)
</UL>

<P><STRONG><a name="[1b7]"></a>pwmout_period_us</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, .\build\pwmout_api.o(.text.pwmout_period_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pwmout_period_us &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_ms
</UL>

<P><STRONG><a name="[150]"></a>pwmout_pulsewidth_us</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\pwmout_api.o(.text.pwmout_pulsewidth_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pwmout_pulsewidth_us &rArr; pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::pulsewidth_us(int)
</UL>

<P><STRONG><a name="[1b8]"></a>pwmout_read</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, .\build\pwmout_api.o(.text.pwmout_read))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>

<P><STRONG><a name="[155]"></a>pwmout_write</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, .\build\pwmout_api.o(.text.pwmout_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = pwmout_write &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::write(float)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_pulsewidth_us
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>

<P><STRONG><a name="[138]"></a>serial_baud</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\serial_api.o(.text.serial_baud), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(PinName, PinName, int)
</UL>

<P><STRONG><a name="[133]"></a>serial_getc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\serial_device.o(.text.serial_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::read(void*, unsigned)
</UL>

<P><STRONG><a name="[137]"></a>serial_init</STRONG> (Thumb, 512 bytes, Stack size 40 bytes, .\build\serial_api.o(.text.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + In Cycle
<LI>Call Chain = serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_index
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(PinName, PinName, int)
</UL>

<P><STRONG><a name="[134]"></a>serial_putc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\serial_device.o(.text.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::write(const void*, unsigned)
</UL>

<P><STRONG><a name="[172]"></a>serial_readable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, .\build\serial_api.o(.text.serial_readable))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::poll(short) const
</UL>

<P><STRONG><a name="[173]"></a>serial_writable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\serial_api.o(.text.serial_writable))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::poll(short) const
</UL>

<P><STRONG><a name="[153]"></a>sleep_manager_lock_deep_sleep_internal</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, .\build\mbed_sleep_manager.o(.text.sleep_manager_lock_deep_sleep_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::lock_deep_sleep()
</UL>

<P><STRONG><a name="[6b]"></a>ticker_irq_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ticker_irq_handler &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.data.irq_handler)
</UL>
<P><STRONG><a name="[1be]"></a>ticker_read</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(.text.ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[fe]"></a>ticker_read_us</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(.text.ticker_read_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
</UL>

<P><STRONG><a name="[3b]"></a>timer_irq_handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\us_ticker.o(.text.timer_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_irq_handler &rArr; us_ticker_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker.o(.text.__NVIC_SetVector)
</UL>
<P><STRONG><a name="[65]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[64]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_disable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[67]"></a>us_ticker_fire_interrupt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\us_ticker.o(.text.us_ticker_fire_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_fire_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_CC1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[68]"></a>us_ticker_get_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_get_info))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[62]"></a>us_ticker_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_init))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[1bf]"></a>us_ticker_irq_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\mbed_us_ticker_api.o(.text.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_handler
</UL>

<P><STRONG><a name="[63]"></a>us_ticker_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_read))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[66]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_set_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[1a5]"></a>wait</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\mbed_wait_api_no_rtos.o(.text.wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wait &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1a8]"></a>wait_ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mbed_wait_api_no_rtos.o(.text.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[1c1]"></a>wait_us</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\mbed_wait_api_no_rtos.o(.text.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>

<P><STRONG><a name="[184]"></a>write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write &rArr; _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL7get_fhci
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[ce]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c3]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1c2]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1c4]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1c5]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[cf]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d0]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c6]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[d3]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\m_wm.l(fpclassify.o)(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[b7]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(__printf_wp.o)(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[39]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(fputc.o)(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lc_numeric_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[3a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1a4]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(d2f.o)(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1c8]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(d2f.o)(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(daddsub_clz.o)(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1cb]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(daddsub_clz.o)(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1ca]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(dnaninf.o)(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1cd]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(dretinf.o)(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[203]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(daddsub_clz.o)(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[1ce]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(daddsub_clz.o)(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1a2]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(f2d.o)(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1d0]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(f2d.o)(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1d1]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(fnaninf.o)(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[94]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[204]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[205]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1c9]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(fretinf.o)(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[76]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(printf1.o)(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[7a]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(printf2.o)(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[69]"></a>_GLOBAL__sub_I_main.cpp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\main.o(.text._GLOBAL__sub_I_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_main.cpp &rArr; __cxx_global_var_init.1 &rArr; Motor::Motor(PinName, PinName) &rArr; mbed::PwmOut::PwmOut__sub_object(PinName) &rArr; pwmout_init &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[124]"></a>__cxx_global_var_init</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, .\build\main.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = __cxx_global_var_init &rArr; mbed::BusOut::BusOut(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName) &rArr; operator new(unsigned) &rArr; mbed_error &rArr; mbed_halt_system &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusOut::BusOut(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[125]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.1 &rArr; Motor::Motor(PinName, PinName) &rArr; mbed::PwmOut::PwmOut__sub_object(PinName) &rArr; pwmout_init &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PinName, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[126]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.2 &rArr; mbed::PwmOut::PwmOut__sub_object(PinName) &rArr; pwmout_init &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::PwmOut__sub_object(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[127]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.3 &rArr; mbed::PwmOut::PwmOut__sub_object(PinName) &rArr; pwmout_init &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::PwmOut__sub_object(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[128]"></a>__cxx_global_var_init.4</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.4 &rArr; mbed::AnalogIn::AnalogIn__sub_object(PinName) &rArr; analogin_init &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn__sub_object(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[129]"></a>__cxx_global_var_init.5</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, .\build\main.o(.text.__cxx_global_var_init.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = __cxx_global_var_init.5 &rArr; mbed::BusIn::BusIn(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName) &rArr; operator new(unsigned) &rArr; mbed_error &rArr; mbed_halt_system &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusIn::BusIn(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[16c]"></a>_ZL9gpio_readP6gpio_t</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\busin.o(.text._ZL9gpio_readP6gpio_t))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::read()
</UL>

<P><STRONG><a name="[f8]"></a>can_irq</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, .\build\can_api.o(.text.can_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SCE_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX0_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\gpio_api.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>

<P><STRONG><a name="[1a7]"></a>gpio_write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_board.o(.text.gpio_write))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[19a]"></a>are_interrupts_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_critical_section_api.o(.text.are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_enter
</UL>

<P><STRONG><a name="[190]"></a>handle_error</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, .\build\mbed_error.o(.text.handle_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = handle_error &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>

<P><STRONG><a name="[1a9]"></a>mbed_halt_system</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.mbed_halt_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbed_halt_system &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_is_isr_active
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>

<P><STRONG><a name="[191]"></a>print_error_report</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, .\build\mbed_error.o(.text.print_error_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = print_error_report &rArr;  mbed_error_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>

<P><STRONG><a name="[177]"></a>_gpio_init_in</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(.text._gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gpio_init_in &rArr; gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in_ex
</UL>

<P><STRONG><a name="[17a]"></a>_gpio_init_out</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\build\mbed_gpio.o(.text._gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[17b]"></a>gpio_write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_gpio.o(.text.gpio_write))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>

<P><STRONG><a name="[12a]"></a>_ZL11get_consolei</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZL11get_consolei))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15default_consolev
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL7get_fhci
</UL>

<P><STRONG><a name="[12b]"></a>_ZL15default_consolev</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZL15default_consolev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11get_consolei
</UL>

<P><STRONG><a name="[12f]"></a>_ZL18handle_open_errorsij</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._ZL18handle_open_errorsij))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ZL18handle_open_errorsij
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[181]"></a>_ZL18openflags_to_posixi</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZL18openflags_to_posixi))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[130]"></a>_ZL18reserve_filehandlev</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZL18reserve_filehandlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = _ZL18reserve_filehandlev &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[132]"></a>_ZL7get_fhci</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._ZL7get_fhci))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ZL7get_fhci &rArr; _ZL11get_consolei &rArr; _ZL15default_consolev &rArr; DirectSerial::DirectSerial__sub_object(PinName, PinName, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL11get_consolei
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[18b]"></a>compute_tick</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(.text.compute_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = compute_tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[19f]"></a>initialize</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, .\build\mbed_ticker_api.o(.text.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>

<P><STRONG><a name="[1a1]"></a>schedule_interrupt</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.schedule_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ticker_match_interval_passed
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[1a0]"></a>update_present_time</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(.text.update_present_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[1b3]"></a>LL_GPIO_GetPinMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_GetPinMode))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>

<P><STRONG><a name="[1bd]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_SetAFPin
</UL>

<P><STRONG><a name="[1bc]"></a>LL_GPIO_SetAFPin_8_15</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetAFPin_8_15))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_SetAFPin
</UL>

<P><STRONG><a name="[1b0]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[1b1]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>

<P><STRONG><a name="[1bb]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
</UL>

<P><STRONG><a name="[1ae]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[1b2]"></a>stm_pin_PullConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\pinmap.o(.text.stm_pin_PullConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm_pin_PullConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>

<P><STRONG><a name="[1af]"></a>stm_pin_SetAFPin</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\pinmap.o(.text.stm_pin_SetAFPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm_pin_SetAFPin
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_8_15
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[18f]"></a>debug</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, .\build\serial_api.o(.text.debug), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[6a]"></a>_GLOBAL__sub_I_SPI.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\spi.o(.text._GLOBAL__sub_I_SPI.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _GLOBAL__sub_I_SPI.cpp &rArr; __cxx_global_var_init &rArr; mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::CircularBuffer__sub_object() &rArr; mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object() &rArr; mbed::transaction_t::transaction_t__sub_object() &rArr; mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.init_array)
</UL>
<P><STRONG><a name="[123]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\spi.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init &rArr; mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::CircularBuffer__sub_object() &rArr; mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object() &rArr; mbed::transaction_t::transaction_t__sub_object() &rArr; mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::CircularBuffer__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_SPI.cpp
</UL>

<P><STRONG><a name="[f5]"></a>ADC_Disable</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, .\build\stm32f3xx_hal_adc_ex.o(.text.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ADC_Disable &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[f7]"></a>ADC_Enable</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, .\build\stm32f3xx_hal_adc_ex.o(.text.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ADC_Enable &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[104]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\stm32f3xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[10c]"></a>TIM_CCxNChannelCmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\stm32f3xx_hal_tim_ex.o(.text.TIM_CCxNChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
</UL>

<P><STRONG><a name="[116]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, .\build\stm32f3xx_hal_tim_ex.o(.text.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[117]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, .\build\stm32f3xx_hal_tim_ex.o(.text.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1c0]"></a>LL_TIM_GenerateEvent_CC1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.LL_TIM_GenerateEvent_CC1))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_fire_interrupt
</UL>

<P><STRONG><a name="[19d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_32bit_timer
</UL>

<P><STRONG><a name="[19c]"></a>__NVIC_SetVector</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.__NVIC_SetVector))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_32bit_timer
</UL>

<P><STRONG><a name="[1cf]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(daddsub_clz.o)(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[1cc]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_wm.l(daddsub_clz.o)(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[cc]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[38]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
